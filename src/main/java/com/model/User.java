/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"com.model\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"panNumber\",\"type\":\"string\"},{\"name\":\"testSchemaField\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public int age;
  @Deprecated public java.lang.CharSequence panNumber;
  @Deprecated public java.lang.CharSequence testSchemaField;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public User() {}

  /**
   * All-args constructor.
   */
  public User(java.lang.CharSequence name, java.lang.Integer age, java.lang.CharSequence panNumber, java.lang.CharSequence testSchemaField) {
    this.name = name;
    this.age = age;
    this.panNumber = panNumber;
    this.testSchemaField = testSchemaField;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return age;
    case 2: return panNumber;
    case 3: return testSchemaField;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: age = (java.lang.Integer)value$; break;
    case 2: panNumber = (java.lang.CharSequence)value$; break;
    case 3: testSchemaField = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'panNumber' field.
   */
  public java.lang.CharSequence getPanNumber() {
    return panNumber;
  }

  /**
   * Sets the value of the 'panNumber' field.
   * @param value the value to set.
   */
  public void setPanNumber(java.lang.CharSequence value) {
    this.panNumber = value;
  }

  /**
   * Gets the value of the 'testSchemaField' field.
   */
  public java.lang.CharSequence getTestSchemaField() {
    return testSchemaField;
  }

  /**
   * Sets the value of the 'testSchemaField' field.
   * @param value the value to set.
   */
  public void setTestSchemaField(java.lang.CharSequence value) {
    this.testSchemaField = value;
  }

  /** Creates a new User RecordBuilder */
  public static com.model.User.Builder newBuilder() {
    return new com.model.User.Builder();
  }
  
  /** Creates a new User RecordBuilder by copying an existing Builder */
  public static com.model.User.Builder newBuilder(com.model.User.Builder other) {
    return new com.model.User.Builder(other);
  }
  
  /** Creates a new User RecordBuilder by copying an existing User instance */
  public static com.model.User.Builder newBuilder(com.model.User other) {
    return new com.model.User.Builder(other);
  }
  
  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private java.lang.CharSequence name;
    private int age;
    private java.lang.CharSequence panNumber;
    private java.lang.CharSequence testSchemaField;

    /** Creates a new Builder */
    private Builder() {
      super(com.model.User.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.model.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.panNumber)) {
        this.panNumber = data().deepCopy(fields()[2].schema(), other.panNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.testSchemaField)) {
        this.testSchemaField = data().deepCopy(fields()[3].schema(), other.testSchemaField);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing User instance */
    private Builder(com.model.User other) {
            super(com.model.User.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.panNumber)) {
        this.panNumber = data().deepCopy(fields()[2].schema(), other.panNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.testSchemaField)) {
        this.testSchemaField = data().deepCopy(fields()[3].schema(), other.testSchemaField);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public com.model.User.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public com.model.User.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'age' field */
    public java.lang.Integer getAge() {
      return age;
    }
    
    /** Sets the value of the 'age' field */
    public com.model.User.Builder setAge(int value) {
      validate(fields()[1], value);
      this.age = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'age' field has been set */
    public boolean hasAge() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'age' field */
    public com.model.User.Builder clearAge() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'panNumber' field */
    public java.lang.CharSequence getPanNumber() {
      return panNumber;
    }
    
    /** Sets the value of the 'panNumber' field */
    public com.model.User.Builder setPanNumber(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.panNumber = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'panNumber' field has been set */
    public boolean hasPanNumber() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'panNumber' field */
    public com.model.User.Builder clearPanNumber() {
      panNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'testSchemaField' field */
    public java.lang.CharSequence getTestSchemaField() {
      return testSchemaField;
    }
    
    /** Sets the value of the 'testSchemaField' field */
    public com.model.User.Builder setTestSchemaField(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.testSchemaField = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'testSchemaField' field has been set */
    public boolean hasTestSchemaField() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'testSchemaField' field */
    public com.model.User.Builder clearTestSchemaField() {
      testSchemaField = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public User build() {
      try {
        User record = new User();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.age = fieldSetFlags()[1] ? this.age : (java.lang.Integer) defaultValue(fields()[1]);
        record.panNumber = fieldSetFlags()[2] ? this.panNumber : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.testSchemaField = fieldSetFlags()[3] ? this.testSchemaField : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
